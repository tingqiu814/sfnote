分布式锁问题及解决方案。
先用redis实现
	获取锁时用setnx 设置不存在的
	为避免拿到锁后客户端异常退出，导致一直持有锁
	要设置过期时间
	expire命令。
	但是setnx 和expire不能分开两条命令
	所以用set nx px命令。实现原子性
	再有就是解锁
	为避免
	A客户端获取锁	超时	解锁前gc pause/网络波动，导致解锁请求在锁超时后才到 
							B客户端获取到锁 
	A解锁了B的锁
	所以要再加个token
	set nx px 3000 value token
	解锁时也要原子性判断； if get锁==token ：del锁
	
	redis AOF同步异步问题
	1. A获取锁
	2. redis异常重启，这个锁没来得及写入恢复文件。
	3. B获取锁
	4. 此时A，B同时拥有锁
	
	此时引入RedLock算法
	假如redis集群A,B,C,D,E五个机器
	1. 记录时间orgtime
	2. 向所有机器发起获取锁请求
	3. 计算获取锁的时间，time-orgtime<锁时间 && 获取锁成功节点>=n/2+1 则成功
	4. 如果获取锁成功，有效时间应该为第3步的时间+过期时间
	5. 如果获取锁失败，要向所有redis节点发解锁操作。（为什么向所有节点发解锁请求，因为有可能加锁成功，返回给客户端失败而记录为失败）
	
	存在一种异常情况：
	1. 客户端1 获取锁成功 A、B、C （D、E没成功）
	2. C点重启，但客户端1的锁没有持久化下来
	3. 客户端2获取锁成功 C、D、E
	这样客户端1，2同事持有锁
	
	RedLock算法作者针对此种情况提出了延时重启方案，delayed restarts时间>锁时间
	
	// TODO RedLock算法存在的问题
	以上redlock算法依赖时间，当时间
	
	Zookeeper实现分布式算法的特性
	1. 客户端1创建znode节点/lock,获取锁。其他客户端创建失败。
	2. 客户端1访问完共享资源将znode删除
	3. znode应该被创建成ephemeral的，这是znode的一个特性，保证如果创建znode的客户端崩溃了，响应的znode会被自动删除。这保证了锁一定会被释放。
	这种ephemeral是维护一个session，定期发送心跳包，如果没返回就把他所有的znode删掉。
	zookeeper还提供了一个watch功能，获取锁失败，就watch，等到拿到锁为止。
	
	